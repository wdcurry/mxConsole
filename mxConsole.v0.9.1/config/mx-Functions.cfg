# File          mx-Functions.cfg
# Desc          Functions specific to mxConsole app
# Author        Drew Curry, ApeStaking
# Version       0.9.1
# Date          jan16-2023
# Location      MultiversX's config folder

#!/bin/bash
set -e

# ------------------------------------------
# Function      GetNodesSlug
# Desc          Use local API calls, and some wizardry to create a VERY concise string to dislay nodes info
#               Three chars: Node#|NodeStatus|NodeDebugMode/{repeat for each node}}
#               Display this on the menu for easy overview.
# ------------------------------------------
function GetNodesSlug {
        mxNodeSummary=""
        # run through each installed node
        #tmp tseting
	#mxNodeCount=1
	
        zbNodeCount=$((mxNodeCount-1))
        for node in $(seq 0 $zbNodeCount)
        do
                # grab the node status
                port=$((8080+node))
                status="$(curl -s http://localhost:${port}/node/status  | jq -r '.data.metrics.erd_peer_type')"
                # grab the debug mode
                unset logLevel
                getNodeLogLevel logLevel $node
                # grab redundancy level
                getNodeRedundancyLevel redundancyLevel $node
		# trim info to 1st char as required (status&loglevel uses 1st char, redundancy is a 2-char string (assuming <11 nodes on server)
                mxNodeSummary+="/$node:${status:0:1}${logLevel:0:1}$redundancyLevel/"
        done
	
	#return summary string
	eval "$1=${mxNodeSummary}"

}

# ------------------------------------------
# Function      getNodeRedundancyLevel
# Desc          returns to passed var current node redundancy level
#               requires $1 to be var to accept state, and $2 to be node integer to check
#               This returns level as r0 for primary, r1 for first redundancy etc. Almost went with p,r1.r2 but r0 is more consistent
# ------------------------------------------
function getNodeRedundancyLevel {

        # set the sesrch string for service file editing
        nodeToCheck=${2}
        searchString="RedundancyLevel ="
	redundancyLevel="r"
        redundancyLevelValue="?"
        targetFile="$HOME/elrond-nodes/node-${nodeToCheck}/config/prefs.toml"

        # set +e is CRUCIAL as grep will signal an error if search text is not found, bizarre but true.
        # 
        set +e
        redundancyCheck=$(grep -s "${searchString}" $targetFile)
        set -e

        if [ ${#redundancyCheck} -gt 0 ]; then
		# strip last char off of returned string, giving us proper info
		redundancyLevelValue=${redundancyCheck: -1}
        fi;
       
	# merge strings for return value
	redundancyLevel+=$redundancyLevelValue 

        #return loglevel mode
        eval "$1=${redundancyLevel}"

}

# ------------------------------------------
# Function      getNodeLogLevel
# Desc          returns to passed var current node's Log Level setting 
#               requires $1 to be var to accept state, and $2 to be node integer to check
#               
# ------------------------------------------
function getNodeLogLevel {
	
	# set the sesrch string for service file editing
	debugMode="DEBUG"
	infoMode="INFO"

	# we presume debug, and test this, switching if incorrect 
	currentMode=$debugMode
	nodeToCheck=${2}
	serviceFile="/etc/systemd/system/elrond-node-${nodeToCheck}.service"

	# set +e is CRUCIAL as grep will signal an error if search text is not found, bizzare but true.
	set +e
	modeCheck=$(grep -s $currentMode $serviceFile)
	set -e

	if [ ${#modeCheck} -eq 0 ]; then currentMode=$infoMode; fi

	#return loglevel mode
	eval "$1=${currentMode}"		

}


# ------------------------------------------
# Function      ShowMxHelp
# Desc          Simple dup of thee menu function, to provide a quick help
#               display in a consisent manner.
#               
# ------------------------------------------
function ShowMxHelp {

        #======DRAW HELP MENU======
        # setup screen and show menu
        # note the $empty on lines wwhere text is set in header, needed to
        #       round out the due layouts. Can be addressed by augmenting
        #       the calc for attrib (subsequent edits obviated this need)
        clear
        # echo -e "$BWHITE${$title}"

        tabs $((titleTab)),$((farRightTab))

        echo -e "$GOLDHEADERCOLOR${blankLine}"
        # having a love/hate thing with the terminal app and keeping the header consise
        #       sometimes it needs the $empty variable to fill in the last tab spot, 
        #       other times not, i have not cleared this issue as yet.
        #echo -e "\t$GOLDHEADERCOLOR${title}\t$empty"
        echo -e "$GOLDHEADERCOLOR${blankLine}"
        # minor graphic hack until i master tab control, as the terminal messes with the fill in
        #       so we will create the full colored line, then return to print text.
        tput cuu 1
        echo -e "\t$GOLDHEADERCOLOR${title} - Help\t"
        echo -e "$GOLDHEADERCOLOR${blankLine}"

        # create tabs for neatness
        tabs $menuTab0,$menuTab1,$menuTab2,$farRightTab

        #echo -e "$GOLDHEADERCOLOR Option \tDescription \tSpecial Notes\t$empty"
        echo -e "$GOLDHEADERCOLOR${blankLine}"
        #tput cuu 1
        #echo -e "$GOLDHEADERCOLOR Option \tDescription \tSpecial Notes\t\t"
        echo -e "$GOLDHEADERCOLOR${blankLine}$NOBACKCOLOR"
        echo -e "$printableLine"

        for i in $(seq 1 $optionCount)
        do
		# simply recreate same size as regular menu
		echo
        done

        # setup a slightly fancy attib line
        tabs $((attribTab))
        echo -e $BWHITE$printableLine
        echo -e "\t$DIMCOLOR${attrib}$STOPCOLORSCHEME$BWHITE$BOLDCOLOR"

        tabs 1,20,75,${appWidth}

        #reset IFS
        IFS="$OFS"

	# draw help, at specific rows, easiest for now to keep UX exactly like menu
	# free space currentlystarts in row 6, ends in row 22
	tput cup 6 2 ; echo "mxConsole was born from one simple idea: hey, let's put termui into script.sh, this should be fun!"
	tput cup 8 2 ; echo "This simple UX wraps all current script.sh offers, plus more to make validator node ops easier."
        tput cup 9 2 ; echo "The app responds to simple keypresses, and limits input to only valid choices."
        tput cup 10 2 ; echo "It integrates into the standard multiversX folder structure and impacts no existing files."
        tput cup 11 2 ; echo "It adds the ability to manage LogLevel mode, reminds you if your github token is not present,"
        tput cup 12 2 ; echo "  and it offers a simple option to upgrade your node, from start to finish,"
        tput cup 13 2 ; echo "  ending up running termui directly."
        tput cup 15 2 ; echo "The app will inspect your install and offer proper nodes to interact with, when required."
        tput cup 16 2 ; echo "In one simple option you can now toggle any node(s) LogLevel from DEBUG to INFO or set the mode directly!"
        tput cup 18 2 ; echo "Use at your own risk, ApeStaking bears no responsbility with your use of mxConsole, "
        tput cup 19 2 ; echo "  but trust we use it on our nodes, in any state: Observer, Waiting AND Eligible, gracias."

	tput cup 22 2 ; echo "mxConsole: brought to you by ApeStaking, drew, & Terry."

        # adjust cursor location for a neater presentation of the contine prompt
        # this places the cursor on the same line as the attrib slug
        #tput cuu 2

        #======END DRAW HELP MENU======

        # setup call to secure user option for how to run commands, receiving a zero-based integer for options array
        # todo: can i seq this rather than manually creating ?
	tapToContinue
	
}
# End of Function      ShowMxHelp
# ------------------------------------------


# ------------------------------------------
# Function      ShowMxMenu
# Desc          Performs all the tasks to present a concise menu  
#               to manage and get a valid MultiservX menu option
#               ** changed to use newer slick read
# ------------------------------------------
function ShowMxMenu {

        #======DRAW MENU======
        # setup screen and show menu
        # note the $empty on lines wwhere text is set in header, needed to
        #       round out the due layouts. Can be addressed by augmenting
        #       the calc for attrib (subsequent edits obviated this need)
        clear
        # echo -e "$BWHITE${$title}"

        tabs $((titleTab)),$((farRightTab))

        echo -e "$GOLDHEADERCOLOR${blankLine}"
        # having a love/hate thing with the terminal app and keeping the header consise
        #	sometimes it needs the $empty variable to fill in the last tab spot, 
        #	other times not, i have not cleared this issue as yet.
        #echo -e "\t$GOLDHEADERCOLOR${title}\t$empty"
        echo -e "$GOLDHEADERCOLOR${blankLine}"
	# minor graphic hack until i master tab control, as the terminal messes with the fill in
	#	so we will create the full colored line, then return to print text.
	tput cuu 1        
        echo -e "\t$GOLDHEADERCOLOR${title}\t"        
        echo -e "$GOLDHEADERCOLOR${blankLine}"

        # create tabs for neatness
        tabs $menuTab0,$menuTab1,$menuTab2,$farRightTab

        #echo -e "$GOLDHEADERCOLOR Option \tDescription \tSpecial Notes\t$empty"
        echo -e "$GOLDHEADERCOLOR${blankLine}"
        tput cuu 1
        echo -e "$GOLDHEADERCOLOR Option \tDescription \tSpecial Notes\t\t"
        echo -e "$GOLDHEADERCOLOR${blankLine}$NOBACKCOLOR"
        echo -e "$printableLine"

        for i in $(seq 1 $optionCount)
        do
                zbi=$(( $i - 1 ))
                # if no note exists, don't print the index empty
                rawNote=${optionsDescsNotes[$zbi]}
		# without the quotes, this next IF is challenged, test when time permits, as to why.
                if [ "$rawNote" == "$empty" ]; then
                        noteText=" "
                else
                        noteText="$mxYELLOW${indexesToOptions[$zbi]}: $mxGREEN$rawNote"
                fi

		#create alternating row feel for even-numbered rows
		if [ $((i%2)) -eq 0 ]; then

			# take the time to do this correctly, as current line formats are blocking out pre-formatting
			
			# create a dim separator line then move back up one row
			# not the look i wanted: echo -e "\e[2;4m$blankLine\e[0m"
			#echo -e "$GOLDHEADERCOLOR${blankLine}"

			#tput cuu 1
			aaa=1 # placemat to avoid shell order, if we comment out section inside if block
		fi

                echo -e  "$mxYELLOW ${indexesToOptions[$zbi]}: ${options[$zbi]}\t$mxGREEN${optionsDescs[$zbi]}\t$mxGREEN${noteText}"
                #echo -e  "$YELLOW ${options[$zbi]}\t$GREEN${optionsDescs[$zbi]}${noteText}"

        done

	#provide subtle hint to help
	tput cup 22 $((farRightTab-1))
        #tabs $((farRightTab-1))
        echo -e "$STOPCOLORSCHEME$DIMCOLOR?$BWHITE$BOLDCOLOR"
	
	
        # setup a slightly fancy attib line
        #tput cuu 1
        tabs $((attribTab))
        echo -e $BWHITE$printableLine
        echo -e "\t$DIMCOLOR${attrib}$STOPCOLORSCHEME$BWHITE$BOLDCOLOR"

        #place nodesSlug to offer concise summary for advanceed operators
        unset nodesSlug
        GetNodesSlug nodesSlug
        tabs $((farRightTab-${#nodesSlug}-1))
        echo -e "\t$DIMCOLOR${nodesSlug}$STOPCOLORSCHEME$BWHITE$BOLDCOLOR"

        tabs 1,20,75,${appWidth}

        #reset IFS
        IFS="$OFS"

        # adjust cursor location for a neater presentation of the read prompt
        # this places the cursor on the same line as the attrib slug
        tput cuu 2

        #======END DRAW MENU======

        # setup call to secure user option for how to run commands, receiving a zero-based integer for options array
        # todo: can i seq this rather than manually creating ?
        unset choice
        getValidChoice ">Select mx option (QqXx-quit)" choice "${acceptedKeys[@]}"
	zbIndex=${optionsIndexes[$choice]}

        eval "$1=${zbIndex}"

}
# End of Function      ShowMxMenu
# ------------------------------------------

# ------------------------------------------
# Function	RegularNodeUpgrade
# Desc		Will perform all steps in *normal* upgrade,
#		and will ask (a-auto, s-stepXstep, c-cancel)
#
# ------------------------------------------
function RegularNodeUpgrade {
	#Create an array of commands to run in a loop, allowing for minimal coding for separate runModes (auto/stepXstep)
	# Remember to not pass aliases, as they do not get interpreted correctly
	commandsToRun=( 
                'cd ~/mx-chain-scripts'
                './script.sh github_pull'
                './script.sh upgrade'
                './script.sh start'
                '$HOME/elrond-utils/termui -address localhost:8080'
		)

	# to help secure trust and aid adoption, show every command to be run
	# the printf forces a newline between commands in the command array,  and
	# the extra tab tweak is needed to align the first element that has no space prior to it in array
	echo "The Regular Node Upgrade will use *only* the following commands:"
	echo
	printf "\t"
	printf "%s\n\t" "${commandsToRun[@]}"
	echo

        zbNumSteps=$(( ${#commandsToRun[@]} - 1 ))

        # setup call to secure user option for how to run commands
        choices=( A a S s C c )
        unset runMode
        getValidChoice "Run upgrade (Aa-auto, Ss-stepXstep, or Cc-cancel)" runMode "${choices[@]}"

        case $runMode in
                "A")    echo "Running regular upgrade"
			yesOrCancel okToCont 'Ok to upgrade?'
			if [[ $okToCont	 == "Y" ]]; then
				for i in $(seq 0 $zbNumSteps); do
	                                eval "${commandsToRun[$i]}"
	                                echo
	                        done
			fi;;

                "S")    echo "running stepXstep regular upgrade"
                        for i in $(seq 0 $zbNumSteps); do
			        # setup call to secure user option for how to run commands
			        execChoices=( Y y S s C c )
			        unset execNextChoice
			        getValidChoice "Run next command (${commandsToRun[$i]})? (Yy-yes, Ss-skip, or Cc-cancel)" execNextChoice "${execChoices[@]}"
			        case $execNextChoice in
			                "Y")	eval "${commandsToRun[$i]}" ;;
	                                "S")	;;
	                                "C")	tapToContinue "Regular Upgrade cancelled."
	                                	break ;;
	                                *)	;;
                                esac
                        done ;;
                "C")	tapToContinue "Regular Upgrade cancelled.";;
                *)      ;;
        esac

}

# ------------------------------------------
# Function      FullNodeUpgrade
# Desc          Will perform all steps in *normal* upgrade,  
#               and will ask (a-auto, s-stepXstep, c-cancel)
#
# ------------------------------------------
function FullNodeUpgrade {
        #Create an array of commands to run in a loop, allowing for minimal coding for separate runModes (auto/stepXstep)
        # Remember to not pass aliases, as they do not get interpreted correctly
        # NOTE: THIS IS DESTRUCTIVE and will be double-checked for ok to continue.
	# todo: this routine needs a proper exiting message, due to multiple exit points
        commandsToRun=(
                'cd ~/mx-chain-scripts'
                './script.sh github_pull'
                './script.sh stop'
                './script.sh remove_db'
                './script.sh upgrade'
                './script.sh start'
                '$HOME/elrond-utils/termui -address localhost:8080'
                )

        # to help secure trust and aid adoption, show every command to be run
        # the printf forces a newline between commands in the command array,  and
        # the extra tab tweak is needed to align the first element that has no space prior to it in array
        echo "The Full Node Upgrade will use *only* the following commands:"
        echo
        printf "\t"
        printf "%s\n\t" "${commandsToRun[@]}"
        echo

        zbNumSteps=$(( ${#commandsToRun[@]} - 1 ))

        # setup call to secure user option for how to run commands
        choices=( A a S s C c )
        unset runMode
        getValidChoice "Run FULL upgrade (Aa-auto, Ss-stepXstep, or Cc-cancel)" runMode "${choices[@]}"

        case $runMode in
                "A")    echo "Running full upgrade"
                        yesOrCancel okToCont 'A FULL upgrade will wipe the current database, are you sure?'
                        if [[ $okToCont  == "Y" ]]; then
                                for i in $(seq 0 $zbNumSteps); do
                                	#tmp: testing loops
#                                       echo "in AUTO MODE:${commandsToRun[$i]}"
					eval "${commandsToRun[$i]}"
                                         
                                        echo
                                done
                        fi;;

                "S")    echo "running stepXstep full upgrade"

                	# one last warning before continuing
                        yesOrCancel okToCont 'A FULL upgrade will wipe the current database, are you sure?'
                        if [[ $okToCont  == "Y" ]]; then

	                        for i in $(seq 0 $zbNumSteps); do
	                                # setup call to secure user option for how to run commands
	                                execChoices=( Y y S s C c )
	                                unset execNextChoice
	                                getValidChoice "Run next command (${commandsToRun[$i]})? (Yy-yes, Ss-skip, or Cc-cancel)" execNextChoice "${execChoices[@]}"

	                                case $execNextChoice in
#                                                "Y")    echo "in AUTO MODE:${commandsToRun[$i]}";;
                                                "Y")    eval "${commandsToRun[$i]}" ;;	                                
	                                        "S")    ;;
	                                        "C")    tapToContinue "Full Upgrade cancelled."
	                                        	break ;;
	                                        *)      ;;
	                                esac
	                        done
                        fi;;
                "C")    tapToContinue "Regular Upgrade cancelled.";;
                *)      ;;
        esac

}

# ------------------------------------------
# Function      ToggleDEBUG
# Desc          Simplifies the task of flipping between DEBUG and INFO modes, or directly setting modes
# ------------------------------------------
function ToggleDEBUG {

	# Primary decision point: does user want to simply toggle, or explicitly set to DEBUG or INFO?
	toggleModes=( T t D d I i )
	unset toggleMode
	toggleMsg="You can (T)oggle between (D)EBUG & (I)NFO, or set the mode directly (T, D, I, or CcXx-cancel)"
	getValidChoice "$toggleMsg" toggleMode "${toggleModes[@]}"

	# set the sesrch string for service file editing
	debugMode="DEBUG"
	infoMode="INFO"

	selectedNode=0
	cancelArray=( C c X x )
	allArray=( * ) 
	flippedNodes=()
	
	#tmp: for testing
	#mxNodeCount=3

	# before showing termui, check nodecount, if we have more than one, offer slick selection
	# else fall back to node-0, then run termui after if[]

	zbNodeCount=$((mxNodeCount-1))
	if [[ mxNodeCount -gt 1 ]]; then

	        nodeDisplayString=$(seq -s ", " 0 $zbNodeCount)", *"
	        # produce (for ie 3 nodes): ( 0 1 2 C c X x ), allowing us to cancel with c or x
		# note the outside brackets are responsible for actualizing the sequence into an array
	        nodeChoices=($(seq -s " " 0 $zbNodeCount))
	        
	        #store copy of just the valid nodes to double-check selection
	        nodeOnlyChoices=("${nodeChoices[@]}")

	        # add custom elements to allow cancelling out
	        nodeChoices+=(${cancelArray[@]})
	        nodeChoices+=(${allArray[@]})

		# todo: this echo will ALSO list all files in current directory, which this does too: echo [ * ]
		#	figure out (as time permits) .. why 
	        #echo "nodeChoices is ${nodeChoices[*]}"

	        #options here are # for node to run with termui OR C|X to quit, 
	        getValidChoice "Select Node to toggle: ${nodeDisplayString} (select * for all, CcXx-cancel)" selectedNode "${nodeChoices[@]}"

	else
		#we only have one node, set the array of available nodes directly
		nodeOnlyChoices=( 0 )
	fi

	# nodesToProcessArray is either [ selectedNode ] OR nodeOnlyChoice[]
	nodesToProcessArray=()                        
	if [[ $selectedNode == '*' ]]; then
		#arrayClone=("${ArrayToClone[@]}")
		nodesToProcessArray=("${nodeOnlyChoices[@]}") 
	elif [[ ${nodeOnlyChoices[*]} =~ $selectedNode ]]; then
		nodesToProcessArray=( $selectedNode ) 
	else
		nodesToProcessArray=()
	fi

	# set flag to tell app to reload daemon ONLY if required
	reloadDaemon=0

	for nodeToToggle in "${nodesToProcessArray[@]}"
	do
		#toggle the service state, either from debug to info or vice-cersa.
		serviceFile="/etc/systemd/system/elrond-node-${nodeToToggle}.service"

		# Now honor user request for how to set node state
	        # We ALWAYS search for the mode we want to switch to, defaulting to DEBUG
		# A non-empty fromMode will be the signal we need to flip this node
		fromMode=""
		toMode=""
		searchMode=$debugMode
		
		# set +e is CRUCIAL as grep will signal an error if search text is not found, bizzare but true.
		set +e
	        modeCheck=$(grep -s $searchMode $serviceFile)
	        set -e

	        if [ ${#modeCheck} -gt 0 ]; then
	                currentMode=$debugMode
	                newMode=$infoMode
		else
			currentMode=$infoMode
			newMode=$debugMode
	        fi

	        case $toggleMode in
	                "D")	if [[ $currentMode == $infoMode ]]; then
	                		fromMode=$infoMode
	                		toMode=$debugMode
	                	fi   
			;;
			"I")    if [[ $currentMode == $debugMode ]]; then
	                                fromMode=$debugMode
	                                toMode=$infoMode
	                        fi
			
			;;
			"T")    if [[ $currentMode == $debugMode ]]; then
	                                fromMode=$debugMode
	                                toMode=$infoMode
				else
	                                fromMode=$infoMode
	                                toMode=$debugMode
	                        fi
			
			;;
		esac

		if [[ ${#fromMode} -gt 0 ]]; then
			# we must flip this node, so store it in the flippedeNodes() array and stop it
			#	this allows us pinpoint control on which node(s) to impact
			flippedNodes+=(${nodeToToggle})
			#stop current node.
			nodeToStop="elrond-node-$nodeToToggle"
			sudo systemctl stop $nodeToStop			
			
		        echo "! flipping $nodeToStop from $fromMode to $toMode"
	                reloadDaemon=1
	                sudo sed -i "s/$fromMode/$toMode/" $serviceFile
		fi
		
	done

	# multiversX code stops the possible proxy as well, so do that here
	proxy_stop

	# all nodes involved are examined,and those flipped are stopped and toggled, now restart the service controller, if needed
	if [[ $reloadDaemon == 1  ]]; then
		sudo systemctl daemon-reload
	        # now restart involved nodes
	        # TODO: could add logic to see if nodes even need stopping and starting, this is simpler but lazy.
	        flippedNodesCount=${#flippedNodes[@]}
	        
	        for flippedNode in "${flippedNodes[@]}"
	        do
	                #stop current node
	                nodeToStart="elrond-node-$flippedNode"
	                sudo systemctl start $nodeToStart
	        done
	        nodeSuffix=""
	        if [[ $flippedNodesCount -gt 1 ]]; then nodeSuffix="s";  fi
	        echo "! reloaded systemctl daemon and restarted $flippedNodesCount node$nodeSuffix"

        
	else
	        echo "No node(s) neeeded flipping this time!"

	fi

	# now restart involved nodes
	# TODO: could add logic to see if nodes even need stopping and starting, this is simpler but lazy.
	for nodeToToggle in "${nodesToProcessArray[@]}"
	do
		#stop current node
		nodeToStart="elrond-node-$nodeToToggle"
	        sudo systemctl start $nodeToStart

	done
	# multiversX code stops the possible proxy as well, so do that here
	proxy_start

}












# ======Utility Functions======

# ------------------------------------------
# accept array and offer a looping read until user enters a valid choice, unless they ctrl-c out of sequence.
# To call this correctly, the unset result var must be the first param and the array the next array
# like:
#	choices=( A S C )
#       unset result
#       getValidChoice "run upgrade (A-auto, S-stepXstep, or C-cancel)" result "${choices[@]}"
#       echo -e "returned value was ${result}"
# A bit of fun: one char entry only, prompt lines grows with an error indicator if wrong entry tried, and
#	we stay on the same line rather than the cumbersome manner most such entry efforts use.
# Todo: # return the zero-based choice of the option selected, but this is challenging to do simply.
# ------------------------------------------
function getValidChoice {

	if (( $# == 0 )); then
		echo "usage: getValidChoice {arrayOfChoices}"
	fi

	validChoices=("$@")
	unset choice
	prompt=$1
	
	# manage variables to allow a growing prompt in response to wrong inputs
	origPrompt=$prompt
	errorPromptPrefix=""
	errorPromptSymbol="ⓧ " 
	alreadyShown=0

	# turn off ENTER key, save location of cursor, allowing calling app to be independent of this routine
	stty igncr ; tput sc
	while [[ ! ${validChoices[*]} =~ (^|[[:space:]])"$choice"($|[[:space:]]) ]]; do
		if [[ alreadyShown -eq 1 ]]; then
			# grow cursor one error icon per bad entry, then reset cursor location
			errorPromptPrefix+="$errorPromptSymbol"
			prompt="$errorPromptPrefix$origPrompt"
			tput rc
		fi
		# read only one char, then stay on same line
		# here, without -e, the four cursor arrow keys are interpreted as A-D
                read -N 1 -r -ep "${prompt}: " choice

		#todo: orig code left the caller code with cursor ON the original spot of selection, allowing for clean over-write,
		#	this is not currently working as such, test why.

		alreadyShown=1
	done

	# turn ENTER key back on
	stty -igncr
	# set calling variable that informs external routine of selected value
	# upp-case the choice
	# NOTE: one minor customization to enable the ? key, convert it to H. We cannot use it in code
	if [[ $choice == "?" ]]; then choice="H"; fi
	choice=${choice^^}

	eval "$2=${choice}"
	# set cursor to next line to be polite
	#echo
}

# -----------------------------------------
# wrap call to getValidChoice to enable simple yesToContinue function
# ------------------------------------------
function yesOrCancel {
	# important Bash detail: wrapping variable in quote tells Bash to ignore spaces in string, lest they be array-like structures
	#	thus we use "$2" to grab full pass sentence of prompt
	
	ycPrompt="Continue? (Yy-yes,Cc-cancel)"

        if [[ $# -gt 1 ]]; then
        	#caller passes custom prompt, use it
                ycPrompt="$2"" (Yy-yes,Cc-cancel)"
        fi
	
	ycChoices=( Y y C c )
	unset ycChoice
        getValidChoice "$ycPrompt" ycChoice "${ycChoices[@]}"
	# return choice to caller's first passed variable, upper-cased by getValidChoice()
	eval "$1=${ycChoice}"

	# and for a shortcut in caller code, return 1 for yes, 0 for no
	# purpose not needed it seemed, lfr
#	if [[ $ycChoice == "Y" ]]; then
#		echo "exiting true"
#		echo 0
#	else
#		echo "exiting false"
#		echo 1
#	fi

}

#================
# simple function to give user control before cycling back to calling script
# if a param is passed, it is prepended to the prompt
function tapToContinue {

	if [[ ! -z $1 ]]; then
		tapPrompt="$1"", press any key to continue..."
	else
                tapPrompt="Press any key to continue..."
	fi
	echo -e
	read -n 1 -p "$tapPrompt"

}

# ------------------------------------------
# encapsulate call to get #nodes MultiversX installed,
# returns: param1: #nodes, param2*: zero-based #nodes, param3*: usable seq array, param4*: ??
# todo: create an if here and if no .numberofnodes is found, count node-X folders
# ------------------------------------------
function getMultiversXNodeInfo {
	# todo: noted if this var is set local, then the return'd value is null'd out upon return to caller, seems as-ref not as-val, confirm
	numNodesLocal=0
	# replace this with mx-oriented setting for homebase
	if [[ -f $CUSTOM_HOME/.numberofnodes ]]; then  numNodesLocal=$(cat $CUSTOM_HOME/.numberofnodes); fi
	
	# create value-added info and pass if asked for
	zbNumNodes=$(( numNodesLocal - 1 ))
	nodeArray="( "$(seq -s " " 0 $zbNumNodes)" )"

	# return if required
        numParams=$#
	eval "$1=${numNodesLocal}"	
        if [[ $numParams -gt 1 ]]; then eval "$2=${zbNumNodes}"; fi
	# seriously, the formatting required for bash is astoundingly random it seems
        if [[ $numParams -gt 2 ]]; then eval "$3="'$nodeArray'""; fi
	
}

# ======END



